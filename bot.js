require('dotenv').config();
const { Telegraf } = require('telegraf');
const axios = require('axios');

const bot = new Telegraf(process.env.BOT_TOKEN);
const openaiApiKey = process.env.OPENAI_API_KEY;

bot.start((ctx) => {
  ctx.reply('–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ AI managed ü§ñ\n\n–ù–∞–ø–∏—à–∏:\n\n–ù–∏—à–∞: ...\n–¶–ê: ...\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: ...\n\n–Ø —Å–≥–µ–Ω–µ—Ä–∏—Ä—É—é 2 –æ—Ñ—Ñ–µ—Ä–∞.');
});

bot.on('text', async (ctx) => {
  const input = ctx.message.text;

  const prompt = `
–¢—ã ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–¥–∞—é—â–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤.
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 2 –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ —à–∞–±–ª–æ–Ω—É:

üéØ –û—Ñ—Ñ–µ—Ä –¥–ª—è –Ω–∏—à–∏: [—É–∫–∞–∑–∞—Ç—å]
1. üí° –ß—Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—à—å
2. üî• –ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ
3. üß† –ö—Ç–æ —Ç—ã
4. üöÄ –ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é

+ –í–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏ CTA

–í–≤–æ–¥–Ω—ã–µ:
${input}
`;

  try {
    const response = await axios.post(
      'https://api.openai.com/v1/chat/completions',
      {
        model: 'gpt-4o',
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.7
      },
      {
        headers: {
          'Authorization': `Bearer ${openaiApiKey}`,
          'Content-Type': 'application/json'
        }
      }
    );

    const result = response.data.choices[0].message.content;
    ctx.reply(result);
  } catch (error) {
    console.error(error.response?.data || error.message);
    ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å OpenAI –∫–ª—é—á.');
  }
});

bot.launch();
console.log('ü§ñ AI managed bot –∑–∞–ø—É—â–µ–Ω');
